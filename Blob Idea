public OobModel(float x, float y, float radius, World world) {
        super(x, y);
        this.world = world;
        this.radius = radius;
        // Gameplay attributes
        isGrounded = false;
        jumpCooldown = 0;
    }
    public void init() {

        // Create central blob
        WheelObstacle centerBlob = new WheelObstacle(getX(), getY(), 0.25f);
        centerBlob.setDensity(OOB_DENSITY);
        centerBlob.setRestitution(0.4f);
        centerBlob.setFriction(0.5f);
        bodies.add(centerBlob);

        // Create outer blobs
        for (int i = 0; i < BLOBS; i++) {
            double angle = (2 * Math.PI) / (i * BLOBS);
            float blobX = (float) (getX() + radius * Math.cos(angle));
            float blobY = (float) (getY() + radius * Math.sin(angle));
            WheelObstacle blob = new WheelObstacle(blobX, blobY, 0.25f);
            blob.setDensity(OOB_DENSITY);
            blob.setRestitution(0.4f);
            blob.setFriction(0.5f);
            bodies.add(blob);
        }
    }

    public boolean createJoints(World world) {
        assert bodies.size > 0;

        for (int i = 1; i <= BLOBS; i++) {
            // Connect all outer blobs to center
            DistanceJointDef jointDef = new DistanceJointDef();
            jointDef.bodyA = bodies.get(0).getBody();
            jointDef.bodyB = bodies.get(i).getBody();
            jointDef.length = radius;
            jointDef.collideConnected = true;
            jointDef.frequencyHz = 5.0f;
            jointDef.dampingRatio = 0.5f;
            Joint joint = world.createJoint(jointDef);
            joints.add(joint);

            // Connect the outer blobs to each other
            jointDef.bodyA = bodies.get(i).getBody();
            jointDef.bodyB = bodies.get((i+1)%BLOBS).getBody();
            jointDef.collideConnected = true;
            jointDef.frequencyHz = 5.0f;
            jointDef.dampingRatio = 0.5f;
            Joint joint2 = world.createJoint(jointDef);
            joints.add(joint2);
        }
        return true;
    }
